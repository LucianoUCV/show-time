@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager

<nav class="custom-navbar">
    <a href=""><img src="logo-test.png" alt="Festival Logo" class="logo" /></a>

    <ul class="nav-links">
        <li><NavLink href="/" Match="NavLinkMatch.All">Home</NavLink></li>
        <li><NavLink href="/festival/user-view">Festivals</NavLink></li>
        <AuthorizeView Roles = "Admin">
            <Authorized>
                <li><NavLink href="/dashboard">Dashboard</NavLink></li>
            </Authorized>
        </AuthorizeView>
		<li><NavLink href="/about">About</NavLink></li>
		<li><NavLink href="/contact">Contact</NavLink></li>

        <AuthorizeView>
            <Authorized>
                <li><NavLink href="/Account/Manage">@context.User.Identity?.Name</NavLink></li>
                <li class="nav-action"><NavLink>
						<form action="/Account/Logout" method="post">
							<AntiforgeryToken />
							<input type="hidden" name="ReturnUrl" value="#" />
							<button type="submit">
                                Logout
							</button>
						</form>
                </NavLink></li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-action"><NavLink href="/Account/Register">Register</NavLink></li>
                <li class="nav-action"><NavLink href="/Account/Login">Login</NavLink></li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</nav>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

