@page "/festivals/details/{id:guid}"
@rendermode InteractiveServer
@inject IFestivalRepository FestivalRepo
@inject IBandRepository BandRepo
@inject NavigationManager Navigation
@inject ShowTimeContext db

@if (Festival == null)
{
    <p>Loading...</p>
}
else
{
    <Card Margin="Margin.Is3" Padding="Padding.Is4" Background="Background.White" Shadow="Shadow.Default">
        <CardHeader>
            <Heading Size="HeadingSize.Is4">@Festival.Name</Heading>
        </CardHeader>
        <CardBody>
            <p><strong>Location:</strong> @Festival.Location</p>
            <p><strong>Dates:</strong> @Festival.StartDate?.ToShortDateString() - @Festival.EndDate?.ToShortDateString()</p>
            <p><strong>Description:</strong> @Festival.Description</p>
        </CardBody>
    </Card>

    <Heading Size="HeadingSize.Is3" Margin="Margin.Is3.FromTop">Lineup</Heading>

    <DropContainer TItem="BandItem"
                   Items="@BandItems"
                   ItemDropped="OnItemDropped"
                   ItemsFilter="@( (item, dz) => item.Zone == dz )"
                   Flex="Flex.Wrap.Grow.Is1">

        <ChildContent>
            <DropZone TItem="BandItem"
                      Name="available"
                      AllowReorder
                      Padding="Padding.Is3"
                      Margin="Margin.Is3"
                      Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is5">Available Artists</Heading>
            </DropZone>

            <DropZone TItem="BandItem"
                      Name="lineup"
                      AllowReorder
                      Reordered="OnReordered"
                      Padding="Padding.Is3"
                      Margin="Margin.Is3"
                      Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is5">Line-up</Heading>
            </DropZone>
        </ChildContent>

        <ItemTemplate>
            <Card Shadow="Shadow.Default" Margin="Margin.Is2.OnY">
                <CardBody>
                    <strong>@context.Band.Name</strong><br />
                    <small>@context.Band.Genre</small>
                </CardBody>
            </Card>
        </ItemTemplate>
    </DropContainer>


    <div class="d-flex justify-content-end mt-4">
        <Button Color="Color.Secondary" Clicked="SaveLineup">Save lineup</Button>
    </div>

    @if (!string.IsNullOrWhiteSpace(Status))
    {
        <p class="text-success mt-3">@Status</p>
    }
}

@code {
    [Parameter] public Guid id { get; set; }
    public class BandItem
    {
        public Band Band { get; set; } = null!;
        public string Zone { get; set; } = "available";
        public int Order { get; set; } = 0;
    }
    private string Status = "";
    private List<BandItem> BandItems = new();
    private Festival? Festival;

    protected override async Task OnInitializedAsync()
    {
        Festival = await FestivalRepo.GetFestivalWithLineupAsync(id);
        if (Festival == null)
        {
            Navigation.NavigateTo("/festivals");
            return;
        }

        var allBands = await BandRepo.GetAllAsync();

        var associatedBandIds = Festival.FestivalBands.Select(fb => fb.BandId).ToHashSet();

        var lineupItems = Festival.FestivalBands
            .OrderBy(fb => fb.Order)
            .Select(fb => new BandItem
                {
                    Band = fb.Band,
                    Zone = "lineup",
                    Order = fb.Order
                });

        var availableItems = allBands
            .Where(b => !associatedBandIds.Contains(b.Id))
            .Select(b => new BandItem
                {
                    Band = b,
                    Zone = "available",
                    Order = 0
                });

        BandItems = lineupItems.Concat(availableItems).ToList();
    }

    private Task OnItemDropped(DraggableDroppedEventArgs<BandItem> e)
    {
        e.Item.Zone = e.DropZoneName;
        return Task.CompletedTask;
    }

    private Task OnReordered(DropZoneOrder<BandItem> order)
    {
        int index = 1;
        foreach (var item in order.OrderedItems.OrderBy(i => i.Order))
        {
            item.Item.Order = index++;
        }
        return Task.CompletedTask;
    }

    private async Task SaveLineup()
    {
        if (Festival == null) return;

        var lineup = BandItems
            .Where(b => b.Zone == "lineup")
            .OrderBy(b => b.Order)
            .Select((b, i) => new FestivalBand
                {
                    FestivalId = Festival.Id,
                    BandId = b.Band.Id,
                    Order = i + 1
                });

        await FestivalRepo.SaveLineupAsync(Festival.Id, lineup);
        Status = "Line-up saved!";
    }
    private void GoBack()
    {
        Navigation.NavigateTo("/festivals");
    }
}